<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2.1 (Build 801)" ts="2020-03-18 16:12:44">
<Class name="s01.Controller.Procedimento">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,57525.678185</TimeChanged>
<TimeCreated>65442,41502.179563</TimeCreated>

<Method name="Cadastrar">
<ClassMethod>1</ClassMethod>
<FormalSpec>descricao,mnemonico,preco,idSetor,status</FormalSpec>
<Implementation><![CDATA[
 	Set procedimentoService = ##class(s01.Service.Procedimento).%New()
 	Do procedimentoService.VerificaSetor(idSetor)
 	Return procedimentoService.Cadastrar(descricao, mnemonico, preco, idSetor, status)
]]></Implementation>
</Method>

<Method name="Consultar">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Procedimento</ReturnType>
<Implementation><![CDATA[
	Set procedimentoService = ##class(s01.Service.Procedimento).%New()
	Return procedimentoService.Consultar(id)
]]></Implementation>
</Method>

<Method name="Inativar">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	Set procedimentoService = ##class(s01.Service.Procedimento).%New()
	Do procedimentoService.Inativar(id)
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set procedimentoService = ##class(s01.Service.Procedimento).%New()
	Set listaDeProcedimentos = ##class(%Library.ListOfObjects).%New()
	Set listaDeProcedimentos = procedimentoService.ListarTodos()
	Return listaDeProcedimentos
]]></Implementation>
</Method>
</Class>


<Class name="s01.Controller.Setor">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,58236.456496</TimeChanged>
<TimeCreated>65442,41502.282956</TimeCreated>

<Method name="Cadastrar">
<ClassMethod>1</ClassMethod>
<FormalSpec>setorDto</FormalSpec>
<Implementation><![CDATA[
	Try{
	 	Set setorService = ##class(s01.Service.Setor).%New()
	 	Return setorService.Cadastrar(setorDto)
	}
	Catch{
		Read #!!, "	Erro ao cadastrar Setor",
		!!, "	Pressione Enter para voltar ao menu... ", controle
		Kill controle
		Return 0
	}
]]></Implementation>
</Method>

<Method name="Consultar">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Setor</ReturnType>
<Implementation><![CDATA[
	Set setorService = ##class(s01.Service.Setor).%New()
	Return setorService.Consultar(id)
]]></Implementation>
</Method>

<Method name="Inativar">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	Set setorService = ##class(s01.Service.Setor).%New()
	Do setorService.Inativar(id)
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set setorService = ##class(s01.Service.Setor).%New()
	Set listaDeSetores = ##class(%Library.ListOfObjects).%New()
	Set listaDeSetores = setorService.ListarTodos()
	Return listaDeSetores
]]></Implementation>
</Method>
</Class>


<Class name="s01.DAO.Procedimento">
<Super>%RegisteredObject</Super>
<TimeChanged>65450,43741.859967</TimeChanged>
<TimeCreated>65442,41502.496047</TimeCreated>

<Method name="Cadastrar">
<FormalSpec>descricao,mnemonico,preco,idSetor,status</FormalSpec>
<Implementation><![CDATA[
 	Set procedimentoPersistencia = ##class(s01.Persistencia.Procedimento).%New()
 	Set procedimentoDto = ##class(s01.DTO.Procedimento).%New()
 	Set setorDto = ##class(s01.DTO.Setor).%New()
 	Set procedimentoDto.Descricao = descricao
 	Set procedimentoDto.Mnemonico = mnemonico
 	Set procedimentoDto.Preco = preco
 	Set procedimentoDto.Status = status
	Set procedimentoDto.Setor = idSetor
 	Set procedimentoPersistencia.Descricao = procedimentoDto.Descricao
 	Set procedimentoPersistencia.Mnemonico = procedimentoDto.Mnemonico
 	Set procedimentoPersistencia.Preco = procedimentoDto.Preco
 	Do procedimentoPersistencia.SetorSetObjectId(idSetor)
 	Set procedimentoPersistencia.Status = procedimentoDto.Status
 	Return procedimentoPersistencia.%Save()
]]></Implementation>
</Method>

<Method name="Consultar">
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Procedimento</ReturnType>
<Implementation><![CDATA[
	Set procedimentoPersistencia = ##class(s01.Persistencia.Procedimento).%OpenId(id)
	Set procedimentoDto = ##class(s01.DTO.Procedimento).%New()
	Set procedimentoDto.Descricao = procedimentoPersistencia.Descricao
	Set procedimentoDto.Mnemonico = procedimentoPersistencia.Mnemonico
	Set procedimentoDto.Preco = procedimentoPersistencia.Preco
	Set procedimentoDto.Setor = procedimentoPersistencia.Setor
	Set procedimentoDto.Status = procedimentoPersistencia.Status
	Return procedimentoDto
]]></Implementation>
</Method>

<Method name="Inativar">
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	Set procedimentoPersistencia = ##class(s01.Persistencia.Procedimento).%OpenId(id)
	Set procedimentoPersistencia.Status = "Inativo"
	Do procedimentoPersistencia.%Save()
	Kill procedimentoPersistencia
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set consultaSql = ##class(%ResultSet).%New()
	Set listaDeProcedimentos = ##class(%Library.ListOfObjects).%New()
	Do consultaSql.Prepare("SELECT ID FROM s01_Persistencia.Procedimento")
	Do consultaSql.Execute()
	While (consultaSql.Next()){
		Set idProcedimento = consultaSql.Get("ID")
		Set procedimentoPersistencia = ##class(s01.Persistencia.Procedimento).%OpenId(idProcedimento)
		Set procedimentoDto = ##class(s01.DTO.Procedimento).%New()
		Set procedimentoDto.Descricao = procedimentoPersistencia.Descricao
		Set procedimentoDto.Mnemonico = procedimentoPersistencia.Mnemonico
		Set procedimentoDto.Preco = procedimentoPersistencia.Preco
		Set procedimentoDto.Setor = procedimentoPersistencia.Setor
		Set procedimentoDto.Status = procedimentoPersistencia.Status
		Do listaDeProcedimentos.Insert(procedimentoDto)
	}
	Return listaDeProcedimentos
]]></Implementation>
</Method>
</Class>


<Class name="s01.DAO.Setor">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,42214.94429</TimeChanged>
<TimeCreated>65442,41502.592621</TimeCreated>

<Method name="Cadastrar">
<FormalSpec>setorDto</FormalSpec>
<Implementation><![CDATA[
 	Set setorPersistencia = ##class(s01.Persistencia.Setor).%New()
 	Set setorPersistencia.Descricao = setorDto.Descricao
 	Set setorPersistencia.Status = setorDto.Status
 	Return setorPersistencia.%Save()
]]></Implementation>
</Method>

<Method name="Consultar">
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Setor</ReturnType>
<Implementation><![CDATA[
	Set setorPersistencia = ##class(s01.Persistencia.Setor).%OpenId(id)
	Set setorDto = ##class(s01.DTO.Setor).%New()
	Set setorDto.Descricao = setorPersistencia.Descricao
	Set setorDto.Status = setorPersistencia.Status
	Return setorDto
]]></Implementation>
</Method>

<Method name="Inativar">
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	Set setorPersistencia = ##class(s01.Persistencia.Setor).%OpenId(id)
	Set setorPersistencia.Status = "Inativo"
	Do setorPersistencia.%Save()
	Kill setorPersistencia
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set consultaSql = ##class(%ResultSet).%New()
	Set listaDeSetores = ##class(%Library.ListOfObjects).%New()
	Do consultaSql.Prepare("SELECT ID FROM s01_Persistencia.Setor")
	Do consultaSql.Execute()
	While (consultaSql.Next()){
		Set idSetor = consultaSql.Get("ID")
		Set setorPersistencia = ##class(s01.Persistencia.Setor).%OpenId(idSetor)
		Set setorDto = ##class(s01.DTO.Setor).%New()
		Set setorDto.Descricao = setorPersistencia.Descricao
		Set setorDto.Status = setorPersistencia.Status
		Do listaDeSetores.Insert(setorDto)
	}
	Return listaDeSetores
]]></Implementation>
</Method>
</Class>


<Class name="s01.DTO.Procedimento">
<Super>%RegisteredObject</Super>
<TimeChanged>65450,36375.533289</TimeChanged>
<TimeCreated>65442,41502.700189</TimeCreated>

<Property name="Mnemonico">
<Type>%String</Type>
</Property>

<Property name="Descricao">
<Type>%String</Type>
</Property>

<Property name="Preco">
<Type>%Decimal</Type>
</Property>

<Property name="Setor">
<Type>%Integer</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
</Property>
</Class>


<Class name="s01.DTO.Setor">
<Super>%RegisteredObject</Super>
<TimeChanged>65443,38663.135017</TimeChanged>
<TimeCreated>65442,41502.799127</TimeCreated>

<Property name="Descricao">
<Type>%String</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
</Property>
</Class>


<Class name="s01.Persistencia.Procedimento">
<Super>%Persistent,%Populate</Super>
<TimeChanged>65456,55434.106997</TimeChanged>
<TimeCreated>65451,34458.245698</TimeCreated>

<Property name="Mnemonico">
<Type>%String</Type>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Preco">
<Type>%Decimal</Type>
<Parameter name="MAXVAL" value="99999999.99"/>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="Setor">
<Type>s01.Persistencia.Setor</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Ativo,Inativo"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^s01.Persistencia.ProcedimentoD</DataLocation>
<DefaultData>ProcedimentoDefaultData</DefaultData>
<IdLocation>^s01.Persistencia.ProcedimentoD</IdLocation>
<IndexLocation>^s01.Persistencia.ProcedimentoI</IndexLocation>
<StreamLocation>^s01.Persistencia.ProcedimentoS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="ProcedimentoDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Mnemonico</Value>
</Value>
<Value name="3">
<Value>Descricao</Value>
</Value>
<Value name="4">
<Value>Preco</Value>
</Value>
<Value name="5">
<Value>Setor</Value>
</Value>
<Value name="6">
<Value>Status</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.55</AverageFieldSize>
</Property>
<Property name="Descricao">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>4.95</AverageFieldSize>
</Property>
<Property name="Mnemonico">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
</Property>
<Property name="Preco">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>4.9</AverageFieldSize>
</Property>
<Property name="Setor">
<Selectivity>7.6923%</Selectivity>
<AverageFieldSize>1.5</AverageFieldSize>
</Property>
<Property name="Status">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>5.9</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="MnemonicoIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="s01.Persistencia.Setor">
<Super>%Persistent,%Populate</Super>
<TimeChanged>65456,55340.564973</TimeChanged>
<TimeCreated>65451,34416.461123</TimeCreated>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Ativo,Inativo"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^s01.Persistencia.SetorD</DataLocation>
<DefaultData>SetorDefaultData</DefaultData>
<IdLocation>^s01.Persistencia.SetorD</IdLocation>
<IndexLocation>^s01.Persistencia.SetorI</IndexLocation>
<StreamLocation>^s01.Persistencia.SetorS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="SetorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Descricao</Value>
</Value>
<Value name="3">
<Value>Status</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.55</AverageFieldSize>
</Property>
<Property name="Descricao">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>4.75</AverageFieldSize>
</Property>
<Property name="Status">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>5.9</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="s01.Service.Procedimento">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,58287.523548</TimeChanged>
<TimeCreated>65442,41503.103007</TimeCreated>

<Method name="VerificaSetor">
<ClassMethod>1</ClassMethod>
<FormalSpec>idSetor</FormalSpec>
<Implementation><![CDATA[	Set setor = ##class(s01.Persistencia.Setor).%ExistsId(idSetor)
]]></Implementation>
</Method>

<Method name="Cadastrar">
<FormalSpec>descricao,mnemonico,preco,idSetor,status</FormalSpec>
<Implementation><![CDATA[
 	Set procedimentoDao = ##class(s01.DAO.Procedimento).%New() 

 #;	If (mnemonico '= existeNoBanco){

 #;		Return 0

 #;		// NA VIEW --> Write !!, "	Esse mnemonico não existe no banco"

 #;	}

 #;	Elseif (setor '= existeNoBanco){

 #;		Return 0

 #;		// NA VIEW --> Write !!, "	Esse setor não existe no banco"

 #;	}

 #;	Elseif (status '= existeNoBanco){
 #;		Return 0
 #;		// NA VIEW --> Write !!, "	Esse status não existe no banco"
 #;	}
	Return procedimentoDao.Cadastrar(descricao, mnemonico, preco, idSetor, status)
]]></Implementation>
</Method>

<Method name="Consultar">
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Procedimento</ReturnType>
<Implementation><![CDATA[
	if (##class(s01.Persistencia.Procedimento).%ExistsId(id)){
		Set procedimentoDao = ##class(s01.DAO.Procedimento).%New()
		Set procedimentoDto = ##class(s01.DTO.Procedimento).%New()
		Set procedimentoDto = procedimentoDao.Consultar(id)
		Return procedimentoDto
	}
	Else{
		Return 0
	}
]]></Implementation>
</Method>

<Method name="Inativar">
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	If (##class(s01.Persistencia.Procedimento).%ExistsId(id)){
		Set procedimentoDao = ##class(s01.DAO.Procedimento).%New()
		Do procedimentoDao.Inativar(id)
	}
	Else{
		Return 0
	}
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set procedimentoDao = ##class(s01.DAO.Procedimento).%New()
	Set listaDeProcedimentos = ##class(%Library.ListOfObjects).%New()
	Set listaDeProcedimentos = procedimentoDao.ListarTodos()
	Return listaDeProcedimentos
]]></Implementation>
</Method>
</Class>


<Class name="s01.Service.Setor">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,56882.416408</TimeChanged>
<TimeCreated>65442,41503.20529</TimeCreated>

<Method name="Cadastrar">
<FormalSpec>setorDto</FormalSpec>
<Implementation><![CDATA[
	If ((setorDto.Status = "Ativo") || (setorDto.Status = "Inativo")){
		Set setorDao = ##class(s01.DAO.Setor).%New()
		Return setorDto.Cadastrar(setorDto)
	}
 	Else{
	 	THROW ##class(%Exception.General).%New("	O status não é válido!!")
 	}
]]></Implementation>
</Method>

<Method name="Consultar">
<FormalSpec>id</FormalSpec>
<ReturnType>s01.DTO.Setor</ReturnType>
<Implementation><![CDATA[
	If (##class(s01.Persistencia.Setor).%ExistsId(id)){
		Set setorDao = ##class(s01.DAO.Setor).%New()
		Set setorDto = ##class(s01.DTO.Setor).%New()
		Set setorDto = setorDao.Consultar(id)
		Return setorDto
	}
	Else{	
		Return 0
	}
]]></Implementation>
</Method>

<Method name="Inativar">
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	If (##class(s01.Persistencia.Setor).%ExistsId(id)){
		Set setorDao = ##class(s01.DAO.Setor).%New()
		Do setorDao.Inativar(id)
	}
	Else{
		Return 0
	}
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set setorDao = ##class(s01.DAO.Setor).%New()
	Set listaDeSetores = ##class(%Library.ListOfObjects).%New()
	Set listaDeSetores = setorDao.ListarTodos()
	Return listaDeSetores
]]></Implementation>
</Method>
</Class>


<Class name="s01.View.Principal">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,57994.995625</TimeChanged>
<TimeCreated>65450,40853.608963</TimeCreated>

<Method name="Menu">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do{
		Read #!!, "	Você deseja ver opções para:", !,
		!, "	1. Procedimento",
		!, "	2. Setor",
		!!, "	0. Sair", !!, "	Digite a opção desejada: ", opcao
		Do ..TratarOpcao(opcao)
	} While(opcao '= 0)
]]></Implementation>
</Method>

<Method name="TratarOpcao">
<ClassMethod>1</ClassMethod>
<FormalSpec>opcao</FormalSpec>
<Implementation><![CDATA[
	If (opcao = 1){
		Do ..MenuProcedimento()
	}
	
	ElseIf (opcao = 2){
		Do ..MenuSetor()
	}
	ElseIf (opcao = 0){
		Write #
	}
]]></Implementation>
</Method>

<Method name="MenuProcedimento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ##class(s01.View.Procedimento).Menu()
]]></Implementation>
</Method>

<Method name="MenuSetor">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ##class(s01.View.Setor).Menu()
]]></Implementation>
</Method>
</Class>


<Class name="s01.View.Procedimento">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,58124.903363</TimeChanged>
<TimeCreated>65442,41503.305204</TimeCreated>

<Method name="Menu">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do{
		Read #!!, "	   ----Procedimento----",
		!!, "	Selecione uma das opções:",
		!!, "	1. Cadastrar",
		!, "	2. Consultar",
		!, "	3. Inativar",
		!, "	4. Listar Todos",
		!!, "	0. Sair", !!, "	Digite a opção desejada: ", opcao
		Set procedimentoController = ##class(s01.Controller.Procedimento).%New()
		Do ..TratarOpcao(opcao)
	} While(opcao '= "0")
]]></Implementation>
</Method>

<Method name="TratarOpcao">
<ClassMethod>1</ClassMethod>
<FormalSpec>opcao</FormalSpec>
<Implementation><![CDATA[
	If (opcao = 1){
		Do ..Cadastrar()
	}
	
	ElseIf (opcao = 2){
		Do ..Consultar()
	}
	
	ElseIf (opcao = 3){
		Do ..Inativar()
	}
	
	ElseIf (opcao = 4){
		Do ..ListarTodos()
	}
	ElseIf (opcao = 0){
		Write #
	}
]]></Implementation>
</Method>

<Method name="Cadastrar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Try{
	 	Set procedimentoController = ##class(s01.Controller.Procedimento).%New()
	 	Set setorController = ##class(s01.Controller.Setor).%New()
	 	Write #!!, "			 Cadastro de procedimento:"
	 	Read !!, "	Digite o Mnemonico: ", mnemonico
	 	Read !!, "	Digite a descrição: ", descricao
		Read !!, "	Digite o preço: ", preco
		If (((preco/1) '= (preco)) || (preco < 0)){
			Write !!
			THROW ##class(%Exception.General).%New("Preço inválido","128",,"O preço precisa ser um número maior que zero!")
		}
	 	Read !!, "	Digite o id do setor: ", idSetor
	 	Set setor = setorController.Consultar(idSetor)
	 	If (setor.Status '= "Ativo"){
			THROW ##class(%Exception.General).%New("ID de setor inválido","256",,"Esse setor está inativo!")
		}
	 	Read !!, "	Digite o status: ", status
	 	Return procedimentoController.Cadastrar(descricao, mnemonico, preco, idSetor, status)
 	}
 	Catch erro{
	 	Write #!!, "	Houve um problema ao tentar cadastrar o procedimento!"
		Write !, "	Código do erro: ",erro.Code
		Write !, "	Nome do erro: ",erro.Name
		Write !, "	Informação sobre o erro: ",erro.Data
		Read !!, "	Pressione Enter para voltar ao menu... ", controle
		Kill controle
	 }
]]></Implementation>
</Method>

<Method name="Consultar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set procedimentoController = ##class(s01.Controller.Procedimento).%New()
	Read #!!, "	Digite o Id do procedimento a ser consultado: ", id
	Set procedimentoView = procedimentoController.Consultar(id)
	If (procedimentoView '= 0){
		Write #
	 	Write !!, "	Dados do procedimento ", id, ":"
		Write !!, "	Mnemônico:	", procedimentoView.Mnemonico
		Write !, "	Descrição:	", procedimentoView.Descricao
		Write !, "	Preço:		R$ ", procedimentoView.Preco
		Write !, "	Setor:		", procedimentoView.Setor.Descricao
		Write !, "	Status:		", procedimentoView.Status
	}
	Else{
		Write #
		Write !, "	'", id, "' não é um id válido!"
		}
	Read !!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>

<Method name="Inativar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set procedimentoController = ##class(s01.Controller.Procedimento).%New()
	Read #!!, "	Digite o Id do procedimento a ser inativado: ", id
	Set procedimentoView  = procedimentoController.Consultar(id)
	If (procedimentoView '= 0){
		If (procedimentoView.Status = "Ativo"){
			Do procedimentoController.Inativar(id)
			Write #!!, "	Dados do procedimento ", id, " inativado:", !!
			Write "	Mnemônico:	", procedimentoView.Mnemonico, !
			Write "	Descrição:	", procedimentoView.Descricao, !
			Write "	Preço:		R$ ", procedimentoView.Preco, !
			Write "	Setor:		", procedimentoView.Setor.Descricao, !
		}
		Else{
			Write #
			Write !!, "	O procedimento já está Inativo!!"
		}
	}
	Else{
		Write #
		Write !, "	'", id, "' não é um id válido!"
	}
	Read !!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set procedimentoController = ##class(s01.Controller.Procedimento).%New()
	Set listaDeProcedimentos = ##class(%Library.ListOfObjects).%New()
	Set listaDeProcedimentos = procedimentoController.ListarTodos()
	For i=1:2:listaDeProcedimentos.Count(){
		Write #
		Write !!!, "			 Lista de procedimentos:"
		Write !!!!, "	Dados do procedimento ", i, ":"
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "	Dados do procedimento ", i+1, ":"
		}
		
		Write !!, "	Mnemônico:	", listaDeProcedimentos.GetAt(i).Mnemonico
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "		Mnemônico:	", listaDeProcedimentos.GetAt(i+1).Mnemonico
		}
		
		Write !, "	Descrição:	", listaDeProcedimentos.GetAt(i).Descricao
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "		Descrição:	", listaDeProcedimentos.GetAt(i+1).Descricao
		}
		
		Write !, "	Preço:		R$ ", listaDeProcedimentos.GetAt(i).Preco
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "    	", "Preço:		R$ ", listaDeProcedimentos.GetAt(i+1).Preco
		}
		
		Write !, "	Setor:		", listaDeProcedimentos.GetAt(i).Setor.Descricao
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "		Setor:		", listaDeProcedimentos.GetAt(i+1).Setor.Descricao
		}
		
		Write !, "	Status:		", listaDeProcedimentos.GetAt(i).Status
		If (##class(s01.Persistencia.Procedimento).%ExistsId(i+1)){
			Write "		Status:		", listaDeProcedimentos.GetAt(i+1).Status
		}
		
		Write !!!, "			     Página ", $NORMALIZE((i/2), 0), " de ", $NORMALIZE((listaDeProcedimentos.Count()/2), 0)
		If (i+1<listaDeProcedimentos.Count()){
			Read !!!!!, "	Pressione Enter para ir a próxima página ", controle
			Kill controle
		}
	}
	Read !!!!!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>
</Class>


<Class name="s01.View.Setor">
<Super>%RegisteredObject</Super>
<TimeChanged>65456,58197.507053</TimeChanged>
<TimeCreated>65442,41503.406868</TimeCreated>

<Method name="Menu">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do{
		Read #!!, "	     ----Setor----",
		!!, "	Selecione uma das opções:", !,
		!, "	1. Cadastrar",
		!, "	2. Consultar",
		!, "	3. Inativar",
		!, "	4. Listar Todos",
		!!, "	0. Sair", !!, "	Digite a opção desejada: ", opcao
		Set setorController = ##class(s01.Controller.Setor).%New()
		Do ..TratarOpcao(opcao)
	} While(opcao '= 0)
]]></Implementation>
</Method>

<Method name="TratarOpcao">
<ClassMethod>1</ClassMethod>
<FormalSpec>opcao</FormalSpec>
<Implementation><![CDATA[
	If (opcao = 1){
		Do ..Cadastrar()
	}
	
	ElseIf (opcao = 2){
		Do ..Consultar()
	}
	
	ElseIf (opcao = 3){
		Do ..Inativar()
	}
	
	ElseIf (opcao = 4){
		Do ..ListarTodos()
	}
	ElseIf (opcao = 0){
		Write #
	}
]]></Implementation>
</Method>

<Method name="Cadastrar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 	Set setorController = ##class(s01.Controller.Setor).%New()
 	Write #!!, "			 Cadastro de setor:"
 	Read !!, "	Digite a descrição: ", descricao
	Read !!, "	Digite o status: ", status
	Set setorDto = ##class(s01.DTO.Setor).%New()
 	Set setorDto.Descricao = descricao
 	Set setorDto.Status = status
 	Return setorController.Cadastrar(setorDto)
]]></Implementation>
</Method>

<Method name="Consultar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set setorController = ##class(s01.Controller.Setor).%New()
	Read #!!, "	Digite o Id do setor a ser consultado: ", id
	Set setorView = setorController.Consultar(id)
	If (setorView '= 0){
		Write #
	 	Write !!, "	Dados do setor ", id, ":"
		Write !, "	Descrição:	", setorView.Descricao
		Write !, "	Status:		", setorView.Status
	}
	Else{
		Write #
		Write !, "	'", id, "' não é um id válido!"
		}
	Read !!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>

<Method name="Inativar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set setorController = ##class(s01.Controller.Setor).%New()
	Read #!!, "	Digite o Id do Setor a ser inativado: ", id
	Set setorView  = setorController.Consultar(id)
	If (setorView '= 0){
		If (setorView.Status = "Ativo"){
			Do setorController.Inativar(id)
			Write #!!, "	Dados do setor ", id, " inativado:", !!
			Write "	Descrição:	", setorView.Descricao, !
		}
		Else{
			Write #
			Write !!, "	O setor já está Inativo!!"
		}
	}
	Else{
		Write #
		Write !, "	'", id, "' não é um id válido!"
	}
	Read !!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>

<Method name="ListarTodos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set setorController = ##class(s01.Controller.Setor).%New()
	Set listaDeSetores = ##class(%Library.ListOfObjects).%New()
	Set listaDeSetores = setorController.ListarTodos()
	For i=1:2:listaDeSetores.Count(){
		Write #
		Write !!!, "			 Lista de setores:"
		Write !!!!, "	Dados do setor ", i, ":"
		If (##class(s01.Persistencia.Setor).%ExistsId(i+1)){
			Write "		Dados do setor ", i+1, ":"
		}
		Write !!!, "	Descrição:	", listaDeSetores.GetAt(i).Descricao
		If (##class(s01.Persistencia.Setor).%ExistsId(i+1)){
			Write "		Descrição:	", listaDeSetores.GetAt(i+1).Descricao
		}
		Write !, "	Status:		", listaDeSetores.GetAt(i).Status
		If (##class(s01.Persistencia.Setor).%ExistsId(i+1)){
			Write "		Status:		", listaDeSetores.GetAt(i+1).Status
		}
		Write !!!, "			     Página ", $NORMALIZE((i/2), 0), " de ", $NORMALIZE((listaDeSetores.Count()/2), 0)
		If (i+1<listaDeSetores.Count()){
			Read !!!!!, "	Pressione Enter para ir a próxima página ", controle
			Kill controle
		}
	}
	Read !!!!!, "	Pressione Enter para voltar ao menu... ", controle
	Kill controle
]]></Implementation>
</Method>
</Class>


</Export>
